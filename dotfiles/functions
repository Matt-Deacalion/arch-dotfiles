#───────────────────────────────────────────────────────────────────────────────
# stopwatch: counts time until `q` is pressed.
#───────────────────────────────────────────────────────────────────────────────
stopwatch () {
    /usr/bin/clear && utimer -s
}


#───────────────────────────────────────────────────────────────────────────────
# man: override man command to not wipe text when leaving man, and colour output
#───────────────────────────────────────────────────────────────────────────────
man () {
    env \
    MANPAGER="less -M -X" \
    LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md="$BOLD$ORANGE" \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[48;5;74m\E[38;5;233m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
}


#───────────────────────────────────────────────────────────────────────────────
# start: start a systemd service unit and show it's status
#───────────────────────────────────────────────────────────────────────────────
start () {
    sudo systemctl start "$@.service"
    sudo systemctl status -a "$@.service"
}


#───────────────────────────────────────────────────────────────────────────────
# stop: stop a systemd service unit and show it's status
#───────────────────────────────────────────────────────────────────────────────
stop () {
    sudo systemctl stop "$@.service"
    sudo systemctl status -a "$@.service"
}


#───────────────────────────────────────────────────────────────────────────────
# restart: restart a systemd service unit and show it's status
#───────────────────────────────────────────────────────────────────────────────
restart () {
    sudo systemctl restart "$@.service"
    sudo systemctl status -a "$@.service"
}


#───────────────────────────────────────────────────────────────────────────────
# cleanpy: search and remove all compiled python files
#───────────────────────────────────────────────────────────────────────────────
function clearpy () {
    DEFAULT="."
    find ${1-$DEFAULT} \( -name "*.pyc" -o -name "__pycache__" -o -name "*.pyo" \) -delete
}


#───────────────────────────────────────────────────────────────────────────────
# findpy: search the contents of all python files
#───────────────────────────────────────────────────────────────────────────────
function findpy () {
    DEFAULT="."
    ag --python $1 ${2-$DEFAULT}
}


#───────────────────────────────────────────────────────────────────────────────
# mkd: create a new directory and enter it
#───────────────────────────────────────────────────────────────────────────────
function mkd () {
	mkdir -p "$@" && cd "$@"
}


#───────────────────────────────────────────────────────────────────────────────
# findneg: find crap code
#───────────────────────────────────────────────────────────────────────────────
function findneg () {
    find . -iname "*.py" -type f -print0 | xargs -0 grep -iHP --color=always "if\snot.+?=="
    find . -iname "*.py" -type f -print0 | xargs -0 grep -iHP --color=always "if\snot.+?!="
}


#───────────────────────────────────────────────────────────────────────────────
# diff: use Git’s colored diff when available
#───────────────────────────────────────────────────────────────────────────────
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index "$@"
	}
fi


#───────────────────────────────────────────────────────────────────────────────
# server: start a HTTP server from a directory, optionally specifying the port
#───────────────────────────────────────────────────────────────────────────────
function server () {
	local port="${1:-8000}"
	python2 -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}


#───────────────────────────────────────────────────────────────────────────────
# extract: uncompress and expand most types compressed files
#───────────────────────────────────────────────────────────────────────────────
extract () {
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.bz2)   tar xvjf "$1"    ;;
            *.tar.gz)    tar xvzf "$1"    ;;
            *.tar.xz)    tar xvJf "$1"    ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar x "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xvf "$1"     ;;
            *.tbz2)      tar xvjf "$1"    ;;
            *.tgz)       tar xvzf "$1"    ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *.lzma)      lzma -dv "$1"    ;;
            *.xz)        xz -dv "$1"      ;;
            *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


#───────────────────────────────────────────────────────────────────────────────
# archive: create an archive (.tar.gz) from a directory
#───────────────────────────────────────────────────────────────────────────────
archive () {
    if [ -d "$1" ] ; then
        tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"
    else
        echo "'$1' is not a valid directory!"
    fi
}


#───────────────────────────────────────────────────────────────────────────────
# list-archive: list the contents of an archive or compressed file
#───────────────────────────────────────────────────────────────────────────────
list-archive () {
    if [ -f "$1" ] ; then
        case "$1" in
            *.tar.bz2) tar jtvf "$1"    ;;
            *.tar.gz)  tar ztvf "$1"    ;;
            *.tar)     tar tvf "$1"     ;;
            *)         echo "don't know how to list contents of '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


#───────────────────────────────────────────────────────────────────────────────
# symmetric-encrypt: use a symmetric cipher to encrypt a file, output ASCII.
#───────────────────────────────────────────────────────────────────────────────
symmetric-encrypt () {
    if [ -r "$1" ] ; then
        gpg --armor --symmetric $1
    else
        echo "The file '$1' does not exist or is not readable."
    fi
}


#───────────────────────────────────────────────────────────────────────────────
# asymmetric-encrypt: use an asymmetric cipher to encrypt a file, output ASCII.
#───────────────────────────────────────────────────────────────────────────────
asymmetric-encrypt () {
    if [ -r "$2" ] ; then
        gpg --encrypt --recipient $1 --armor $2
    else
        echo "The file '$2' does not exist or is not readable."
    fi
}


#───────────────────────────────────────────────────────────────────────────────
# watch-polish: watch a Polish movie for Beata's mum.
#───────────────────────────────────────────────────────────────────────────────
watch-polish () {
    mplayer -sub $1 -subcp cp1250 $2
}


#───────────────────────────────────────────────────────────────────────────────
# days-until: returns the days until the provided date (e.g. 2019-04-29).
#───────────────────────────────────────────────────────────────────────────────
days-until () {
python - <<EOF
from datetime import date

today = date.today()
event = [int(i) for i in '$1'.split('-')]

print((date(*event) - today).days)
EOF
}

#───────────────────────────────────────────────────────────────────────────────
# quote: returns a random quote from `~/.quotes.txt'
#───────────────────────────────────────────────────────────────────────────────
quote () {
python - <<EOF
import os
from random import choice
print(choice([q.strip() for q in open(os.path.expanduser('~/.quotes.txt')).read().split('\n\n')]))
EOF
}


#───────────────────────────────────────────────────────────────────────────────
# git-play: a ‘Read-eval-print-loop’ shell to quickly setup various scenarios in
#           a Git repository, handy for learning the more advanced parts of Git
#───────────────────────────────────────────────────────────────────────────────
git-play () {
    commits=( Alpha Beta Charlie Delta Epsilon Foxtrot Golf Hotel India Juliett Kilo Lima Mike )
    commit_index=0

    filenames=( index.html todo.txt README.md Makefile )
    filename_index=0

    branches=( bugFix feature maint develop )
    branch_index=0

    mkd "$1" && git init -q
    echo -e "usage:\n"               \
	    "    f    create file\n" \
	    "    c    commit\n"      \
	    "    b    new branch\n"

    while echo -n "git> "; read -r COMMAND; do
	case $COMMAND in
	    "q")
		break;
		;;
	    "c")
		echo "New commit: ${commits[$commit_index]}"
		echo ${commits[$commit_index]} >> ${filenames[$filename_index-1]}
		git add .
		git commit -m "Added: '${commits[$commit_index]}'"
		commit_index=$((commit_index+1))
		;;
	    "f")
		echo "New file: ${filenames[$filename_index]}"
		touch ${filenames[$filename_index]}
		filename_index=$((filename_index+1))
		;;
	    "b")
		echo "New branch: ${branches[$branch_index]}"
		git checkout -b ${branches[$branch_index]}
		branch_index=$((branch_index+1))
		;;
	esac
    done
}


# vim:ft=sh
